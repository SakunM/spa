第8章　サーバーデータベース		後編		A:\PJ\spa\SnapShots\sec8-2\sec.txt

後半はいよいよSocketIOの解説とフロントサイドとの連携の確認だ。
まず、前半で色々試したルーチンの内、本番に必要なルーチンだけにするためにルータを整理する。
この時、ユーザー認証も外して置く（ベーシック認証は本番環境には適さないし認証はリスクの高いハードルだ）。
Express4の場合Body-Parserも不要になったので、削除する。（代わりにExpress内臓のミドルウエアexpressを使う。）
また、ポストでメンバーを生成するcreateも、フロント側では使わないので削除する。ただし、本来のSPAとは仕様が合わないけど、
ログインペインの右側に検索フォームを作っで、これだけルータで処理する事にして、応答ページを送信するようにした。
つまり、原則一つのページだけで応答するSPAでは無くなった。例えばSPAにJsonで返信してアラートでも出せばSPAの仕様に戻る。TODO

フロント側のサーバー対応はdata.jsとsocket.io.jsをHTMLのheadに追加して、model.jsのconfigオブジェクトのsioの値を
new Fake() から new Data() に変えるだけだ。

サーバー側はlibフォルダにchat.jsを作成。app.jsでlet chat = new Chat(); chat.connectでサーバーとcrudを挿入すれば、
後はChatがフロント側と対話するという設計だ。chat.jsの実装中ルールさえ守ればSocketIOは会話が出来る事を前提に、
MongoDBを実際に使って、目視テストをしながらコーディングできた。ただし、テストメソッドの方が実装メソッドよりも長い（笑）。

フロント側もHTMLからSocketIOの行をコメントアウトすれば、あとは変更なしでDataとFakeを切り替えるようにした。



SPAファイナル			A:\PJ\spa\spa.txt
第1章　最初のシングルページアプリケーション　		A:\PJ\spa\SnapShots\sec1\sec.txt
第2章　JavaScriptのおさらい					A:\PJ\spa\SnapShots\sec2\sec.txt
第3章　シェルの開発 前半					A:\PJ\spa\SnapShots\sec3-1\sec.txt
第3章　シェルの開発 後半					A:\PJ\spa\SnapShots\sec3-2\sec.txt
第4章　機能モジュールの追加		前半		A:\PJ\spa\SnapShots\sec4-1\sec.txt
第4章　機能モジュールの追加　	中編		A:\PJ\spa\SnapShots\sec4-2\sec.txt
第4章　機能モジュールの追加　	後編		A:\PJ\spa\SnapShots\sec4-3\sec.txt
第5章　モデルの構築							A:\PJ\spa\SnapShots\sec5\sec.txt
第6章　モデルとデータモジュールの完成		A:\PJ\spa\SnapShots\sec6\sec.txt
第7章　WEBサーバー							A:\PJ\spa\SnapShots\sec7\sec.txt
第8章　サーバーデータベース					A:\PJ\spa\SnapShots\sec8\sec.txt


GitHub アドレス			https://github.com/SakunM/spa
SPAファイナルReadMe			A:\PJ\spa\readme.txt
前々回の最終バージョン	A:\PJ\JS\all\spas\spa10
前回の最終バージョン	A:\PJ\mamo2\langs\SPA
今回のバージョン		A:\PJ\spa
再々のSPA		A:\プログラミング\書籍サンプル\JS\JavaScript\SPA\再々のSPA.txt
