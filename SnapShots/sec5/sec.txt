第5章　モデルの構築			A:\PJ\spa\SnapShots\sec5\sec.txt


この章では、フロンサイドのドメインのモデルを構築する。モデルはフロント側（UI）やサーバー側とは独立しているべきだ。
このアプリでのモデルの責務の一つに、参加メンバーの管理がある。なので、メンバーを扱いやすくするオブジェクトが欲しい。
また、ログインやログアウト、そしてチャットの管理。つまり責任が多い。その責任もお互いに強く依存している。
本書では、モデルをフロントに据えて、メンバー管理とチャット管理の二つのオブジェクトに抽出した。つまり本書が推すフラクタルMVCだ。
始めは自分もその線で実装してみたけど、メンバー管理とチャット管理の依存関係が強すぎる・・無理に分けても動作を把握しにくい。
なので、自分は違う路線を選択する。フラクタルMVCではなく、モデルとのコラボレータは状態を持たない純粋関数とする。
関数型言語からの知見だ。むりにメンバー管理とチャット管理をわけないで、ログインやログアウトと同列にチャットの参加を扱う。
ただし、メソッドの行数は膨らませない。自明な処理はコラボレータに任せる。ことで、複雑な依存関係の見通しを良くする。

モデルはブラウザから独立しているので、原理的にはNodeからの単体テストも出来るはずだ。今回はその事にもトライしたい。
3章や4章にもどって色々確認して、少し理解が進んだ。さて、モデルの構築はテスト駆動で行う。

ここでは、前半はモデルの構築でログインとログアウトまでを、テスト駆動で開発、テストメソッドはmodel.jsに配置する。
aboutPebblesとaboutAlfredだ。後半はSPAの外観を改善してUIからログイン・ログアウトを行うようにする。
なので、ここいらでPugも　extends ref/layout　で分割管理する。

ここでの、変更はspa.js　と　model.js で、話の途中の上書きはないので、






SPAファイナル			A:\PJ\spa\spa.txt
第1章　最初のシングルページアプリケーション　		A:\PJ\spa\SnapShots\sec1\sec.txt
第2章　JavaScriptのおさらい					A:\PJ\spa\SnapShots\sec2\sec.txt
第3章　シェルの開発 前半					A:\PJ\spa\SnapShots\sec3-1\sec.txt
第3章　シェルの開発 後半					A:\PJ\spa\SnapShots\sec3-2\sec.txt
第4章　機能モジュールの追加		前半		A:\PJ\spa\SnapShots\sec4-1\sec.txt
第4章　機能モジュールの追加　	中編		A:\PJ\spa\SnapShots\sec4-2\sec.txt
第4章　機能モジュールの追加　	後編		A:\PJ\spa\SnapShots\sec4-3\sec.txt
第5章　モデルの構築							A:\PJ\spa\SnapShots\sec5\sec.txt
第6章　モデルとデータモジュールの完成			A:\PJ\spa\SnapShots\sec6\sec.txt

GitHub アドレス			https://github.com/SakunM/spa
SPAファイナルReadMe			A:\PJ\spa\readme.txt
前々回の最終バージョン	A:\PJ\JS\all\spas\spa10
前回の最終バージョン	A:\PJ\mamo2\langs\SPA
今回のバージョン		A:\PJ\spa
再々のSPA		A:\プログラミング\書籍サンプル\JS\JavaScript\SPA\再々のSPA.txt
